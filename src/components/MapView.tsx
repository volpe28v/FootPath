import { useEffect, useState, useRef, useCallback } from 'react';
import { MapContainer, TileLayer, Polyline, Marker, useMap } from 'react-leaflet';
import type { LatLngExpression } from 'leaflet';
import L from 'leaflet';
import { collection, addDoc, query, where, onSnapshot, updateDoc, doc, arrayUnion } from 'firebase/firestore';
import { db } from '../firebase';
import type { GeoPoint, TrackingSession } from '../types/GeoPoint';
import type { ExploredArea, ExplorationStats } from '../types/ExploredArea';
import { ExploredAreaLayer } from './ExploredAreaLayer';
import { generateExploredAreas, calculateExplorationStats, calculateDistance } from '../utils/explorationUtils';
import 'leaflet/dist/leaflet.css';

// Leaflet„ÅÆ„Éá„Éï„Ç©„É´„Éà„Éû„Éº„Ç´„Éº„Ç¢„Ç§„Ç≥„É≥„Çí‰øÆÊ≠£
delete (L.Icon.Default.prototype as unknown as { _getIconUrl: unknown })._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
});

// „Ç´„Çπ„Çø„É†‰ΩçÁΩÆ„Éû„Éº„Ç´„Éº„Ç¢„Ç§„Ç≥„É≥Ôºà‰∫àÂÇôÁî®Ôºâ
// const locationIcon = new L.Icon({
//   iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
//   iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
//   shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
//   iconSize: [25, 41],
//   iconAnchor: [12, 41],
//   popupAnchor: [1, -34],
//   shadowSize: [41, 41]
// });

// ÁµµÊñáÂ≠ó„Éû„Éº„Ç´„Éº„Ç¢„Ç§„Ç≥„É≥Ôºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁî®Ôºâ
const createEmojiIcon = () => {
  const div = document.createElement('div');
  div.innerHTML = 'üìç';
  div.style.fontSize = '24px';
  div.style.textAlign = 'center';
  div.style.lineHeight = '1';
  
  return new L.DivIcon({
    html: div.outerHTML,
    iconSize: [24, 24],
    iconAnchor: [12, 24],
    popupAnchor: [0, -24],
    className: 'emoji-marker'
  });
};

interface MapViewProps {
  userId: string;
}

function LocationUpdater({ position }: { position: LatLngExpression | null }) {
  const map = useMap();
  
  useEffect(() => {
    if (position) {
      map.setView(position, map.getZoom());
    }
  }, [position, map]);
  
  return null;
}

export function MapView({ userId }: MapViewProps) {
  const [currentPosition, setCurrentPosition] = useState<LatLngExpression | null>(null);
  const [isTracking, setIsTracking] = useState(false);
  const [trackingSession, setTrackingSession] = useState<TrackingSession | null>(null);
  const [exploredAreas, setExploredAreas] = useState<ExploredArea[]>([]);
  const [historyExploredAreas, setHistoryExploredAreas] = useState<ExploredArea[]>([]);
  const [, setExplorationStats] = useState<ExplorationStats>({
    totalExploredArea: 0,
    exploredPoints: 0,
    explorationLevel: 1,
    explorationPercentage: 0
  });
  const [showExplorationLayer] = useState(true);
  const [pendingCount, setPendingCount] = useState(0);
  const [totalPointsCount, setTotalPointsCount] = useState(0);
  const watchIdRef = useRef<number | null>(null);
  const batchIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const lastPositionRef = useRef<{lat: number, lng: number, timestamp: number} | null>(null);
  const pendingPointsRef = useRef<GeoPoint[]>([]);

  // „Éê„ÉÉ„ÉÅÂá¶ÁêÜ„ÅßFirestore„Å´ÈÄÅ‰ø°ÔºàÂ¢óÂàÜ‰øùÂ≠òÔºâ
  const flushPendingPoints = async (sessionId: string) => {
    if (pendingPointsRef.current.length === 0) return;
    
    try {
      const pointsToUpload = [...pendingPointsRef.current];
      console.log('flushPendingPoints: pointsToUpload: ', pointsToUpload.length);
      
      // Firestore„Å´Êñ∞„Åó„ÅÑ„Éù„Ç§„É≥„Éà„ÅÆ„Åø„ÇíËøΩÂä†
      const sessionRef = doc(db, 'sessions', sessionId);
      await updateDoc(sessionRef, {
        points: arrayUnion(...pointsToUpload),
        storageMode: 'incremental',
        minDistance: optimizationSettings.minDistance
      });
      
      // ÊàêÂäüÂæå„Å´„ÇØ„É™„Ç¢
      pendingPointsRef.current = [];
      setPendingCount(0);
    } catch (error) {
      // „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº
    }
  };


  // ‰ΩçÁΩÆÊÉÖÂ†±„ÅÆÂ¶•ÂΩìÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
  const validatePosition = (position: GeolocationPosition): boolean => {
    const { accuracy, latitude, longitude } = position.coords;
    const now = Date.now();
    
    // 1. Á≤æÂ∫¶„Éï„Ç£„É´„Çø„É™„É≥„Ç∞Ôºà100m‰ª•‰∏ä„ÅÆË™§Â∑Æ„ÅØÈô§Â§ñÔºâ
    if (accuracy > 100) {
      return false;
    }
    
    // 2. Á∑ØÂ∫¶ÁµåÂ∫¶„ÅÆÂ¶•ÂΩìÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
    if (Math.abs(latitude) > 90 || Math.abs(longitude) > 180) {
      return false;
    }
    
    // 3. ÁßªÂãïÈÄüÂ∫¶„ÉÅ„Çß„ÉÉ„ÇØÔºàÂâç„ÅÆ‰ΩçÁΩÆ„Åå„ÅÇ„ÇãÂ†¥ÂêàÔºâ
    if (lastPositionRef.current) {
      const distance = calculateDistance(
        lastPositionRef.current.lat,
        lastPositionRef.current.lng,
        latitude,
        longitude
      );
      
      const timeDiff = (now - (lastPositionRef.current.timestamp || 0)) / 1000; // Áßí
      const speed = distance / timeDiff; // m/s
      const speedKmh = speed * 3.6; // km/h
      
      // ‰∫∫Èñì„ÅÆÊ≠©Ë°åÈÄüÂ∫¶ÔºàÊôÇÈÄü20km‰ª•‰∏ã„Å´Âà∂ÈôêÔºâ
      if (speedKmh > 20) {
        return false;
      }
      
    }
    
    return true;
  };


  // ÊúÄÈÅ©ÂåñË®≠ÂÆöÔºàÂõ∫ÂÆöÔºâ
  const optimizationSettings = {
    minDistance: 10,    // 10mÈñìÈöî„ÅßË®òÈå≤
    batchInterval: 30000 // 30ÁßíÈñìÈöî„Åß„Éê„ÉÉ„ÉÅ‰øùÂ≠ò
  };

  // Ë∑ùÈõ¢„Éô„Éº„Çπ„ÅÆ‰ΩçÁΩÆÊõ¥Êñ∞Âà§ÂÆö
  const shouldUpdatePosition = (newLat: number, newLng: number): boolean => {
    if (!lastPositionRef.current) {
      return true;
    }
    
    const distance = calculateDistance(
      lastPositionRef.current.lat, 
      lastPositionRef.current.lng, 
      newLat, 
      newLng
    );
    
    return distance >= optimizationSettings.minDistance;
  };

  // ÁèæÂú®„ÅÆ„Éà„É©„ÉÉ„Ç≠„É≥„Ç∞„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆËªåË∑°„Åã„ÇâÊé¢Á¥¢„Ç®„É™„Ç¢„ÇíÊõ¥Êñ∞
  useEffect(() => {
    if (trackingSession && trackingSession.points.length > 0) {
      
      // ÁèæÂú®„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„Åã„ÇâÊé¢Á¥¢„Ç®„É™„Ç¢„ÇíÁîüÊàê
      const newExploredAreas = generateExploredAreas(trackingSession.points, userId);
      
      setExploredAreas(newExploredAreas);
    }
  }, [trackingSession?.points?.length, userId, trackingSession]);

  useEffect(() => {
    
    const sessionsRef = collection(db, 'sessions');
    
    // „Åæ„ÅöÂÖ®„Å¶„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÂèñÂæó„Åó„Å¶„Éá„Éê„ÉÉ„Ç∞
    const allSessionsQuery = query(sessionsRef);
    
    const unsubscribe = onSnapshot(allSessionsQuery, (snapshot) => {
      
      // ÂÖ®„Å¶„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„Çí„É≠„Ç∞Âá∫Âäõ
      snapshot.forEach((doc) => {
        doc.data();
      });
    });
    
    // „É¶„Éº„Ç∂„ÉºÂõ∫Êúâ„ÅÆ„ÇØ„Ç®„É™
    const userQuery = query(
      sessionsRef, 
      where('userId', '==', userId)
    );

    const userUnsubscribe = onSnapshot(userQuery, (snapshot) => {
      
      const points: GeoPoint[] = [];
      const sessions: TrackingSession[] = [];
      
      snapshot.forEach((doc) => {
        const session = doc.data() as TrackingSession;
        
        // points„ÅÆtimestamp„ÇíDateÂûã„Å´Â§âÊèõ
        if (session.points && session.points.length > 0) {
          const convertedPoints = session.points.map(point => ({
            ...point,
            timestamp: point.timestamp && typeof (point.timestamp as unknown as { toDate: () => Date }).toDate === 'function' 
              ? (point.timestamp as unknown as { toDate: () => Date }).toDate() 
              : point.timestamp
          }));
          session.points = convertedPoints;
          
          // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Åß„Å™„ÅÑ„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆ„Éù„Ç§„É≥„Éà„ÅÆ„Åø„ÇíÂ±•Ê≠¥„Å´ËøΩÂä†
          if (!session.isActive) {
            points.push(...convertedPoints);
          }
        }
        
        sessions.push(session);
      });
      
      
      // Á∑è„Éá„Éº„ÇøÊï∞„ÇíÊõ¥Êñ∞
      setTotalPointsCount(points.length);
      
      // ÂÖ®Â±•Ê≠¥„Éù„Ç§„É≥„Éà„Åã„ÇâÊé¢Á¥¢„Ç®„É™„Ç¢„ÇíÁîüÊàê
      if (points.length > 0) {
        const historicalAreas = generateExploredAreas(points, userId);
        setHistoryExploredAreas(historicalAreas);
        
        // Áµ±Ë®à„ÇíÂ±•Ê≠¥Ëæº„Åø„ÅßÊõ¥Êñ∞
        const historicalStats = calculateExplorationStats(historicalAreas);
        setExplorationStats(historicalStats);
      } else {
        setHistoryExploredAreas([]);
      }
      
    });

    return () => {
      unsubscribe();
      userUnsubscribe();
    };
  }, [userId]);


  useEffect(() => {
    // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÅÆÂá∫Âäõ

    // HTTPSÁ¢∫Ë™ç
    if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost') {
      // HTTPSÁí∞Â¢É„Åß„ÅÆ„ÅøÂãï‰Ωú
    }

    // „Éë„Éº„Éü„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÅÆÁ¢∫Ë™ç
    if ('permissions' in navigator) {
      navigator.permissions.query({ name: 'geolocation' }).then((result) => {
        if (result.state === 'denied') {
          // „Éë„Éº„Éü„ÉÉ„Ç∑„Éß„É≥„ÅåÊãíÂê¶„Åï„Çå„Å¶„ÅÑ„Çã
        } else if (result.state === 'prompt') {
          // „Éë„Éº„Éü„ÉÉ„Ç∑„Éß„É≥„Éó„É≠„É≥„Éó„ÉàË°®Á§∫
        } else if (result.state === 'granted') {
          // „Éë„Éº„Éü„ÉÉ„Ç∑„Éß„É≥Ë®±ÂèØÊ∏à„Åø
        }
      }).catch(() => {
        // „Éë„Éº„Éü„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖãÁ¢∫Ë™ç„Ç®„É©„Éº
      });
    }

    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          // ÂàùÊúü‰ΩçÁΩÆÂèñÂæóÊôÇ„ÇÇ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
          if (!validatePosition(position)) {
            const tokyoStation: LatLngExpression = [35.6812, 139.7671];
            setCurrentPosition(tokyoStation);
            return;
          }

          const pos: LatLngExpression = [position.coords.latitude, position.coords.longitude];
          setCurrentPosition(pos);
          lastPositionRef.current = { 
            lat: position.coords.latitude, 
            lng: position.coords.longitude, 
            timestamp: Date.now() 
          };
          
        },
        () => {
          // „Ç®„É©„ÉºÊôÇ„ÅØÊù±‰∫¨ÈßÖ„ÅÆÂ∫ßÊ®ô„ÇíË®≠ÂÆö
          const tokyoStation: LatLngExpression = [35.6812, 139.7671];
          setCurrentPosition(tokyoStation);
        },
        {
          enableHighAccuracy: false, // „É¢„Éê„Ç§„É´„Åß„ÅÆÁ≤æÂ∫¶„Çí‰∏ã„Åí„Å¶ÊàêÂäüÁéáÂêë‰∏ä
          timeout: 15000, // „Çø„Ç§„É†„Ç¢„Ç¶„Éà„ÇíÂª∂Èï∑
          maximumAge: 300000 // 5ÂàÜÈñì„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíË®±ÂèØ
        }
      );
    } else {
      alert('„Åä‰Ωø„ÅÑ„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅØ‰ΩçÁΩÆÊÉÖÂ†±„Çí„Çµ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì');
    }
  }, []);

  const startTracking = useCallback(async () => {
    if (!navigator.geolocation) {
      return;
    }

    setIsTracking(true);
    
    const newSession: Omit<TrackingSession, 'id'> = {
      userId,
      points: [],
      startTime: new Date(),
      isActive: true,
      storageMode: 'incremental',
      minDistance: optimizationSettings.minDistance
    };

    const docRef = await addDoc(collection(db, 'sessions'), newSession);
    const sessionId = docRef.id;
    
    setTrackingSession({ ...newSession, id: sessionId });

    // Êó¢Â≠ò„ÅÆ„Éê„ÉÉ„ÉÅÂá¶ÁêÜ„Çø„Ç§„Éû„Éº„Çí„ÇØ„É™„Ç¢
    if (batchIntervalRef.current) {
      clearInterval(batchIntervalRef.current);
    }

    // „Éê„ÉÉ„ÉÅÂá¶ÁêÜ„Çø„Ç§„Éû„ÉºÈñãÂßãÔºà30ÁßíÈñìÈöîÔºâ
    batchIntervalRef.current = setInterval(() => {
      flushPendingPoints(sessionId);
      console.log('startTracking: flush');
    }, optimizationSettings.batchInterval);

    watchIdRef.current = navigator.geolocation.watchPosition(
      (position) => {
        // ‰ΩçÁΩÆÊÉÖÂ†±„ÅÆÂ¶•ÂΩìÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
        if (!validatePosition(position)) {
          return;
        }

        // ‰ΩçÁΩÆÊÉÖÂ†±„ÇíÁõ¥Êé•‰ΩøÁî®
        const newLat = position.coords.latitude;
        const newLng = position.coords.longitude;
        const now = Date.now();
        
        // Ë∑ùÈõ¢„Éô„Éº„Çπ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        if (!shouldUpdatePosition(newLat, newLng)) {
          return;
        }

        const newPoint: GeoPoint = {
          lat: newLat,
          lng: newLng,
          timestamp: new Date()
        };

        // ÁèæÂú®‰ΩçÁΩÆÊõ¥Êñ∞ÔºàUIÁî®Ôºâ
        setCurrentPosition([newLat, newLng]);
        lastPositionRef.current = { lat: newLat, lng: newLng, timestamp: now };

        // „Éö„É≥„Éá„Ç£„É≥„Ç∞„Ç≠„É•„Éº„Å´ËøΩÂä†ÔºàFirestoreÊõ¥Êñ∞„ÅØÂæå„Åß„Éê„ÉÉ„ÉÅÂá¶ÁêÜÔºâ
        pendingPointsRef.current.push(newPoint);
        setPendingCount(pendingPointsRef.current.length);

        // „É≠„Éº„Ç´„É´Áä∂ÊÖã„ÅØÂç≥Â∫ß„Å´Êõ¥Êñ∞ÔºàUIÂèçÂøúÊÄßÁ∂≠ÊåÅÔºâ
        setTrackingSession((prev) => {
          if (!prev) return null;
          return { ...prev, points: [...prev.points, newPoint] };
        });
      },
      (error) => {
        let errorDetails = '';
        switch(error.code) {
          case 1:
            errorDetails = 'PERMISSION_DENIED: „Éà„É©„ÉÉ„Ç≠„É≥„Ç∞‰∏≠„Å´‰ΩçÁΩÆÊÉÖÂ†±„ÅÆ‰ΩøÁî®„ÅåÊãíÂê¶„Åï„Çå„Åæ„Åó„Åü';
            break;
          case 2:
            errorDetails = 'POSITION_UNAVAILABLE: „Éà„É©„ÉÉ„Ç≠„É≥„Ç∞‰∏≠„Å´‰ΩçÁΩÆÊÉÖÂ†±„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü';
            break;
          case 3:
            errorDetails = 'TIMEOUT: „Éà„É©„ÉÉ„Ç≠„É≥„Ç∞‰∏≠„Å´‰ΩçÁΩÆÊÉÖÂ†±„ÅÆÂèñÂæó„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü';
            break;
          default:
            errorDetails = `Unknown tracking error (code: ${error.code})`;
        }
        
        alert(`‰ΩçÁΩÆÊÉÖÂ†±„ÅÆ„Éà„É©„ÉÉ„Ç≠„É≥„Ç∞‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:\n${errorDetails}`);
      },
      {
        enableHighAccuracy: false, // „Éê„ÉÉ„ÉÜ„É™„ÉºÁØÄÁ¥Ñ
        maximumAge: 30000, // 30Áßí„Ç≠„É£„ÉÉ„Ç∑„É•Ë®±ÂèØ
        timeout: 10000 // 10Áßí„Çø„Ç§„É†„Ç¢„Ç¶„Éà
      }
    );
  }, [userId, optimizationSettings.minDistance, optimizationSettings.batchInterval, flushPendingPoints, shouldUpdatePosition]);

  const stopTracking = async () => {
    setIsTracking(false);
    
    if (watchIdRef.current !== null) {
      // ÈÄöÂ∏∏„ÅÆgeolocation watch„Åæ„Åü„ÅØ„Éá„É¢„É¢„Éº„Éâ„ÅÆinterval„Çí„ÇØ„É™„Ç¢
      if (typeof watchIdRef.current === 'number') {
        // „Éá„É¢„É¢„Éº„Éâ„ÅÆÂ†¥ÂêàÔºösetInterval„ÅÆID„Çí„ÇØ„É™„Ç¢
        clearInterval(watchIdRef.current);
      } else {
        // ÈÄöÂ∏∏„É¢„Éº„Éâ„ÅÆÂ†¥ÂêàÔºögeolocation watch„Çí„ÇØ„É™„Ç¢
        navigator.geolocation.clearWatch(watchIdRef.current);
      }
      watchIdRef.current = null;
    }
    
    if (batchIntervalRef.current) {
      clearInterval(batchIntervalRef.current);
      batchIntervalRef.current = null;
    }

    if (trackingSession) {
      // ÊÆã„Çä„ÅÆ„Éö„É≥„Éá„Ç£„É≥„Ç∞„Éù„Ç§„É≥„Éà„Çí„Éï„É©„ÉÉ„Ç∑„É•
      await flushPendingPoints(trackingSession.id);
      
      const sessionRef = doc(db, 'sessions', trackingSession.id);
      await updateDoc(sessionRef, {
        endTime: new Date(),
        isActive: false
      });
    }

    // Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
    setTrackingSession(null);
    lastPositionRef.current = null;
    pendingPointsRef.current = [];
    setPendingCount(0);
  };

  const currentTrackPositions: LatLngExpression[] = trackingSession 
    ? trackingSession.points.map(point => [point.lat, point.lng])
    : [];

  // „Éá„É¢„É¢„Éº„ÉâÁî®„ÅÆÈñ¢Êï∞ - „Çà„ÇäÁèæÂÆüÁöÑ„Å™Êï£Á≠ñ„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
  const startDemoMode = async () => {
    setIsTracking(true);
    
    const newSession: Omit<TrackingSession, 'id'> = {
      userId,
      points: [],
      startTime: new Date(),
      isActive: true,
      storageMode: 'incremental',
      minDistance: optimizationSettings.minDistance
    };

    const docRef = await addDoc(collection(db, 'sessions'), newSession);
    const sessionId = docRef.id;
    
    setTrackingSession({ ...newSession, id: sessionId });

    // „Éá„É¢Áî®„ÅÆÁßªÂãï„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥Áä∂ÊÖã
    let lat = Array.isArray(currentPosition) ? currentPosition[0] as number : 35.6812;
    let lng = Array.isArray(currentPosition) ? currentPosition[1] as number : 139.7671;
    
    // Êï£Á≠ñ„ÅÆÁä∂ÊÖã
    let direction = Math.random() * Math.PI * 2; // ÂàùÊúüÊñπÂêëÔºà„É©„Ç∏„Ç¢„É≥Ôºâ
    let speed = 1.2; // Ê≠©Ë°åÈÄüÂ∫¶ (m/s) - ÊôÇÈÄüÁ¥Ñ4.3km
    let isResting = false;
    let restTimer = 0;
    let walkDuration = 0;
    const turnTendency = (Math.random() - 0.5) * 0.3; // Â∑¶Âè≥„Å∏„ÅÆÊõ≤„Åå„ÇäÁôñ

    // Êó¢Â≠ò„ÅÆ„Éê„ÉÉ„ÉÅÂá¶ÁêÜ„Çø„Ç§„Éû„Éº„Çí„ÇØ„É™„Ç¢
    if (batchIntervalRef.current) {
      clearInterval(batchIntervalRef.current);
    }

    // „Éê„ÉÉ„ÉÅÂá¶ÁêÜ„Çø„Ç§„Éû„ÉºÈñãÂßãÔºà30ÁßíÈñìÈöîÔºâ
    batchIntervalRef.current = setInterval(() => {
      flushPendingPoints(sessionId);
      console.log('startDemoMode: flush');
    }, optimizationSettings.batchInterval);

    const demoInterval = setInterval(() => {
      walkDuration++;
      
      // ‰ºëÊÜ©„ÅÆÂá¶ÁêÜ
      if (isResting) {
        restTimer--;
        if (restTimer <= 0) {
          isResting = false;
        }
        return;
      }
      
      // 10-30ÂàÜ„Åî„Å®„Å´„É©„É≥„ÉÄ„É†„Å´‰ºëÊÜ©Ôºà1-3ÂàÜÔºâ
      if (walkDuration > 0 && walkDuration % (600 + Math.floor(Math.random() * 1200)) === 0) {
        isResting = true;
        restTimer = 60 + Math.floor(Math.random() * 120); // 1-3ÂàÜ‰ºëÊÜ©
        return;
      }
      
      // Ê≠©Ë°åÈÄüÂ∫¶„Çí5m/sÂõ∫ÂÆö
      speed = 5.0;
      
      // ÊñπÂêë„ÅÆËá™ÁÑ∂„Å™Â§âÂåñ
      direction += (Math.random() - 0.5) * 0.15 + turnTendency; // Âü∫Êú¨ÁöÑ„Å™Êè∫„Çâ„Åé + Êõ≤„Åå„ÇäÁôñ
      
      // „Åü„Åæ„Å´Â§ß„Åç„ÅèÊñπÂêëËª¢ÊèõÔºà‰∫§Â∑ÆÁÇπ„Å™„Å©Ôºâ
      if (Math.random() < 0.05) {
        direction += (Math.random() - 0.5) * Math.PI / 2; // ÊúÄÂ§ß90Â∫¶„ÅÆÊñπÂêëËª¢Êèõ
      }
      
      // ÁßªÂãïË∑ùÈõ¢„ÅÆË®àÁÆóÔºà1Áßí„ÅÇ„Åü„ÇäÔºâ
      const distanceMeters = speed;
      
      // Á∑ØÂ∫¶ÁµåÂ∫¶„Å∏„ÅÆÂ§âÊèõÔºà„Åä„Åä„Çà„Åù„ÅÆË®àÁÆóÔºâ
      const metersPerDegLat = 111000; // Á∑ØÂ∫¶1Â∫¶„ÅÇ„Åü„ÇäÁ¥Ñ111km
      const metersPerDegLng = 111000 * Math.cos(lat * Math.PI / 180); // ÁµåÂ∫¶„ÅØÁ∑ØÂ∫¶„Å´„Çà„ÇäÂ§âÂåñ
      
      const deltaLat = (distanceMeters * Math.cos(direction)) / metersPerDegLat;
      const deltaLng = (distanceMeters * Math.sin(direction)) / metersPerDegLng;
      
      lat += deltaLat;
      lng += deltaLng;

      // ÁèæÂú®‰ΩçÁΩÆ„ÇíÂ∏∏„Å´Êõ¥Êñ∞ÔºàUIË°®Á§∫Áî®Ôºâ
      setCurrentPosition([lat, lng]);
      
      // Ë∑ùÈõ¢„Éô„Éº„Çπ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞Ôºà„Éá„É¢„É¢„Éº„Éâ„Åß„ÇÇÈÅ©Áî®Ôºâ
      if (!shouldUpdatePosition(lat, lng)) {
        // ‰ΩçÁΩÆ„ÅØÊõ¥Êñ∞„Åô„Çã„Åå„ÄÅË®òÈå≤„ÅØ„Çπ„Ç≠„ÉÉ„Éó
        return;
      }

      const newPoint: GeoPoint = {
        lat,
        lng,
        timestamp: new Date()
      };

      lastPositionRef.current = { lat, lng, timestamp: Date.now() };

      // „Éö„É≥„Éá„Ç£„É≥„Ç∞„Ç≠„É•„Éº„Å´ËøΩÂä†
      pendingPointsRef.current.push(newPoint);
      setPendingCount(pendingPointsRef.current.length);

      // „É≠„Éº„Ç´„É´Áä∂ÊÖã„ÅØÂç≥Â∫ß„Å´Êõ¥Êñ∞
      setTrackingSession((prev) => {
        const currentSession = prev || { points: [], id: sessionId, userId, startTime: new Date(), isActive: true };
        return { ...currentSession, points: [...currentSession.points, newPoint] };
      });
    }, 1000); // 1Áßí„Åî„Å®„Å´Êõ¥Êñ∞ÔºàÁèæÂÆüÁöÑ„Å™Êõ¥Êñ∞È†ªÂ∫¶Ôºâ

    // „Ç§„É≥„Çø„Éº„Éê„É´ID„Çí‰øùÂ≠ò
    watchIdRef.current = demoInterval as unknown as number; // „Éá„É¢„É¢„Éº„ÉâÁî®„Å´ÂÜçÂà©Áî®
    
  };

  return (
    <div className="relative h-screen w-full flex flex-col">
      {/* „Éò„ÉÉ„ÉÄ„ÉºÈÉ®ÂàÜ */}
      <div className="bg-white shadow-lg p-4 z-[1002] flex items-center gap-4">
        {/* Â∑¶ÂÅ¥Ôºö„Ç≥„É≥„Éà„É≠„Éº„É´„Éú„Çø„É≥ */}
        <div className="flex items-center gap-3">
          {/* Ë®òÈå≤ÈñãÂßã/ÂÅúÊ≠¢„Éú„Çø„É≥ */}
          <button
            onClick={isTracking ? stopTracking : startTracking}
            className={`px-4 py-2 rounded-lg text-white font-semibold shadow-md transition-all ${
              isTracking 
                ? 'bg-red-500 hover:bg-red-600' 
                : 'bg-blue-500 hover:bg-blue-600'
            }`}
          >
            {isTracking ? 'üìç Ë®òÈå≤ÂÅúÊ≠¢' : 'üìç Ë®òÈå≤ÈñãÂßã'}
          </button>
          
          {/* „Éá„É¢„É¢„Éº„Éâ„Éú„Çø„É≥ */}
          <button
            onClick={startDemoMode}
            className="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg font-medium shadow-md transition-all"
            disabled={isTracking}
          >
            üéÆ „Éá„É¢„É¢„Éº„Éâ
          </button>
          
          {/* „Éá„Éº„ÇøÊï∞Ë°®Á§∫ */}
          <div className="bg-gray-100 text-gray-800 px-4 py-2 rounded-lg font-medium shadow-md">
            üìä {totalPointsCount + (trackingSession?.points?.length || 0) - pendingCount}:{pendingCount}
          </div>
          
        </div>
      </div>

      {/* Âú∞Âõ≥ÈÉ®ÂàÜ */}
      <div className="flex-1">
        <MapContainer
          center={currentPosition || [35.6762, 139.6503]}
          zoom={17}
          className="h-full w-full"
        >
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          opacity={0.4}
        />
        
        {currentPosition && (
          <Marker position={currentPosition} icon={createEmojiIcon()} />
        )}
        
        
        {currentTrackPositions.length > 0 && (
          <Polyline 
            positions={currentTrackPositions} 
            color="red" 
            weight={4}
          />
        )}
        
        <ExploredAreaLayer 
          exploredAreas={[...historyExploredAreas, ...exploredAreas]} 
          isVisible={showExplorationLayer} 
        />
        
        
        <LocationUpdater position={currentPosition} />
      </MapContainer>
      
      </div>
    </div>
  );
}